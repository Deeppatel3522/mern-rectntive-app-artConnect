# name: ArtConnect App Expo Build & Firebase App Distribution

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.13.0' # Using a stable LTS version

#     - name: Install dependencies
#       run: |
#         cd ArtConnect/client
#         npm install
#         cd ../server
#         npm install

#     - name: Install EAS CLI
#       run: npm install -g eas-cli

#     - name: Authenticate with Expo
#       run: echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

#     # - name: Build the app (Production)
#     #   working-directory: ArtConnect/client
#     #   run: |
#     #     # Start the build and get the build ID
#     #     BUILD_ID=$(eas build --platform android --profile production --non-interactive --auto-submit --json | jq -r '.[0].id')
#     #     if [ -z "$BUILD_ID" ]; then
#     #       echo "Error: No build ID found"
#     #       exit 1
#     #     fi
#     #     echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
#     #     # Wait for build to complete and fetch artifact URL
#     #     echo "Waiting for build to complete..."
#     #     until eas build:view "$BUILD_ID" --json | jq -r '.status' | grep -q "finished"; do
#     #       echo "Build in progress..."
#     #       sleep 10
#     #     done
#     #     ARTIFACT_URL=$(eas build:view "$BUILD_ID" --json | jq -r '.artifacts.buildUrl')
#     #     if [ -z "$ARTIFACT_URL" ]; then
#     #       echo "Error: No artifact URL found"
#     #       eas build:view "$BUILD_ID" --json
#     #       exit 1
#     #     fi
#     #     echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

#     # - name: Download the .aab file
#     #   run: |
#     #     curl -L -o app.aab "$ARTIFACT_URL"
#     #     ls -lh app.aab

#      - name: Build the app (Production)
#        run: |
#          cd ArtConnect/client
#          eas build --platform android --profile production


#     - name: Install Firebase CLI
#       run: npm install -g firebase-tools

#     # - name: Upload to Firebase App Distribution
#     #   run: |
#     #     firebase appdistribution:distribute app.aab \
#     #       --app ${{ secrets.FIREBASE_APP_ID }} \
#     #       --groups beta-tester \
#     #       --release-notes "New automated build from GitHub Actions üöÄ" \
#     #       --token ${{ secrets.FIREBASE_TOKEN }}



#  ------------------------ LATEST WORKING --------------------------



# name: ArtConnect App Expo Build & Firebase App Distribution

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.13.0' # Using a stable LTS version

#     - name: Install dependencies
#       run: |
#         cd ArtConnect/client
#         npm install
#         cd ../server
#         npm install

#     - name: Install EAS CLI
#       run: npm install -g eas-cli

#     - name: Authenticate with Expo
#       run: echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

#     # - name: Build the app (Production)
#     #   run: |
#     #     cd ArtConnect/client
#     #     eas build --platform android --profile production

#     - name: Debug build list output
#       run: |
#         cd ArtConnect/client
#         eas build:list --limit 1 --json || true


#     - name: Download build artifact
#       run: |
#         cd ArtConnect/client
#         BUILD_URL=$(eas build:list --limit 1 --json | jq -r '.[0].artifacts.buildUrl')
#         curl -o app.aab "$BUILD_URL"


#     - name: Install Firebase CLI
#       run: npm install -g firebase-tools

#     # - name: Upload to Firebase App Distribution
#     #   run: |
#     #     firebase appdistribution:distribute app.aab \
#     #       --app ${{ secrets.FIREBASE_APP_ID }} \
#     #       --groups beta-tester \
#     #       --release-notes "New automated build from GitHub Actions üöÄ" \
#     #       --token ${{ secrets.FIREBASE_TOKEN }}













name: ArtConnect App Expo Build & Firebase App Distribution

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.13.0'

      - name: Install dependencies
        run: |
          cd ArtConnect/client
          npm install
          cd ../server
          npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      # - name: Build the app (Production)
      #   run: |
      #     cd ArtConnect/client
      #     eas build --platform android --profile production --non-interactive

      - name: Fetch and Parse Latest Build URL
        run: |
          cd ArtConnect/client

          echo "üîê Checking Expo login..."
          eas whoami

          echo "üì¶ Fetching latest build (JSON + non-interactive)..."
          eas build:list --limit 1 --json --non-interactive > output.json || {
            echo "‚ùå Failed to get build list"
            cat output.json
            exit 1
          }

          echo "üìÑ Build JSON:"
          cat output.json

          BUILD_URL=$(jq -r '.[0].artifacts.buildUrl' output.json)
          
          if [ "$BUILD_URL" == "null" ] || [ -z "$BUILD_URL" ]; then
            echo "‚ùå No build URL found."
            exit 1
          fi

          echo "‚¨áÔ∏è Downloading AAB from: $BUILD_URL"
          curl -o app.aab "$BUILD_URL"

          # Debugging AAB file download
          ls -l app.aab
          if [ ! -f app.aab ]; then
            echo "‚ùå AAB file not found."
            exit 1
          fi

      # - name: Debug build list output
      #   run: |
      #     cd ArtConnect/client
      #     eas build:list --limit 1 --json > build_output.json || true
      #     cat build_output.json

      # - name: Download build artifact
      #   run: |
      #     cd ArtConnect/client
      #     BUILD_URL=$(eas build:list --limit 1 --json | jq -r '.[0].artifacts.buildUrl')
      #     curl -o app.aab "$BUILD_URL"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # - name: Upload to Firebase App Distribution
      #   run: |
      #     firebase appdistribution:distribute app.aab \
      #       --app ${{ secrets.FIREBASE_APP_ID }} \
      #       --groups beta-tester \
      #       --release-notes "New automated build from GitHub Actions üöÄ" \
      #       --token ${{ secrets.FIREBASE_TOKEN }}



# ====================== LOGIN ERROR ===========================



      # - name: Upload to Firebase App Distribution
      #   run: |
      #     cd ArtConnect/client
      #     echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > firebase-service-account.json
      #     export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-service-account.json
      #     # Verify the directory and list files to ensure 'app.aab' exists
      #     echo "üîç Checking directory contents:"
      #     ls -al

      #     # Make sure 'app.aab' exists in the current directory
      #     if [ ! -f "app.aab" ]; then
      #       echo "‚ùå app.aab not found!"
      #       exit 1
      #     fi

      #     echo "‚úÖ app.aab found, proceeding with Firebase upload..."

      #     firebase appdistribution:distribute  $(pwd)/app.aab \
      #       --app ${{ secrets.FIREBASE_APP_ID }} \
      #       # --serviceCredentialsFileContent ${{ secrets.CREDENTIAL_FILE_CONTENT }} \
      #       --groups beta-tester \
      #       --release-notes "New automated build from GitHub Actions üöÄ" \


      - name: Set up Google Cloud credentials from secret
        run: |
          cd ArtConnect/client

          echo "${{ secrets.CREDENTIAL_FILE_CONTENT }}" > google-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/google-service-account.json
          # Debugging environment variable
          echo "‚úÖ GOOGLE_APPLICATION_CREDENTIALS is set."

      # - name: Set Firebase project
      #   run: |
      #     firebase use --project ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Upload to Firebase App Distribution
        run: |
          cd ArtConnect/client
          # Verify the directory and list files to ensure 'app.aab' exists
          echo "üîç Checking directory contents:"
          ls -al

          # Make sure 'app.aab' exists in the current directory
          if [ ! -f "app.aab" ]; then
            echo "‚ùå app.aab not found!"
            exit 1
          fi

          if [ ! -f "google-service-account.json" ]; then
            echo "‚ùå google-service-account.json not found!"
            exit 1
          fi

          echo "‚úÖ app.aab && google-service-account.json found, proceeding with Firebase upload..."

          firebase appdistribution:distribute $(pwd)/app.aab \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups beta-tester \
            --release-notes "New automated build from GitHub Actions üöÄ"
